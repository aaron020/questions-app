AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  questions-app-lambda

  This is sample SAM Template for questions-app-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: "*"

  GetDatabaseFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: questions-get-questions-from-database
      CodeUri: questions/get_database/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Architectures:
      - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get
            Method: get
  MyApiGatewayLambdaPermissionGetDatabaseFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetDatabaseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*
  
  AddDatabaseFunction:
    Type: AWS::Serverless::Function 
    Properties:
       FunctionName: questions-add-questions-to-database
       CodeUri: questions/add_database/
       Handler: app.lambda_handler
       Runtime: python3.9
       Layers:
         - !Ref CommonLayer
       Architectures:
       - x86_64
       Role: !GetAtt LambdaExecutionRole.Arn
       Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /add
            Method: get
  MyApiGatewayLambdaPermissionAddDatabaseFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddDatabaseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*

  DeleteFromDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: questions-delete-questions-from-database
      CodeUri: questions/delete_from_database/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /delete
            Method: get
  MyApiGatewayLambdaPermissionDeleteFromDatabaseFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteFromDatabaseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*

  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: options-function
      CodeUri: options_function/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /options
            Method: options
  MyApiGatewayLambdaPermissionOptionsFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OptionsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*



  TopicAddDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: topics-add-topic-to-database
      CodeUri: topics/add_database/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
  MyApiGatewayLambdaPermissionTopicAddDatabaseFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TopicAddDatabaseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*

  TopicGetAllDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: topics-get-all-from-database
      CodeUri: topics/get_all_database/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CommonLayer
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
  MyApiGatewayLambdaPermissionTopicGetAllDatabaseFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TopicGetAllDatabaseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuestionsGateway}/*/*/*

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: python
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  QuestionsGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: QuestionsGateway
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /{proxy+}:
            options:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response for CORS preflight
          topics:
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TopicAddDatabaseFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response from Lambda function
              security:
                - CognitoAuthorizer: [ ]
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TopicGetAllDatabaseFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response from Lambda function
          topics/questions:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy  
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDatabaseFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response from Lambda function
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddDatabaseFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response from Lambda function
              security:
                - CognitoAuthorizer: []
            delete:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFromDatabaseFunction.Arn}/invocations
              responses:
                '200':
                  description: Successful response from Lambda function
              security:
                - CognitoAuthorizer: []
      EndpointConfiguration: REGIONAL

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: questions
      AttributeDefinitions:
        - AttributeName: question_id
          AttributeType: S
        - AttributeName: topic_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: question_id
          KeyType: HASH
        - AttributeName: topic_id
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: TopicIndex
          KeySchema:
            - AttributeName: topic_id
              KeyType: HASH
            - AttributeName: question_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: question_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  DynamoDBTableTopic:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: topics
      AttributeDefinitions:
        - AttributeName: topic_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: topic_id
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: 'dead-user-pool'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: 'OFF'
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: 'dead-user-pool-auth'
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: 'dead-app-client'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0


  

